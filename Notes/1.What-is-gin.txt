🥇 What is Gin?
-------------------

Gin is a web framework written in Go (Golang) that helps you build web servers and APIs easily. It’s like Django for Python or Express for Node.js.

It makes it easy to:

Handle HTTP requests (GET, POST, etc.)

Create routes

Work with JSON

Handle middleware

And more!

🚀 Step 1: Install Gin
========================

In your Go project directory, run:

go get -u github.com/gin-gonic/gin

📦 Your First Gin App
========================

🧑‍🍳 Let's cook a basic server:

package main

import "github.com/gin-gonic/gin"

func main() {
    // Create a router
    r := gin.Default()

    // Define a GET route
    r.GET("/ping", func(c *gin.Context) {
        c.JSON(200, gin.H{
            "message": "pong",
        })
    })

    // Start the server on port 8080
    r.Run(":8080")
}

🔥 Run it:

go run main.go


Now go to: http://localhost:8080/ping
You’ll see:
{"message": "pong"}


🧩 Common HTTP Methods in Gin
===============================

📥 GET
Get data from the server

r.GET("/user", func(c *gin.Context) {
    c.JSON(200, gin.H{"user": "john"})
})


📤 POST
Send data to the server

r.POST("/create", func(c *gin.Context) {
    name := c.PostForm("name")
    c.JSON(200, gin.H{"message": "User " + name + " created"})
})

🧹 PUT / DELETE
Update or delete something

r.PUT("/update", func(c *gin.Context) {
    // logic here
})
r.DELETE("/delete", func(c *gin.Context) {
    // logic here
})

🎯 Route Parameters
📌 Path Params (like /user/123)


r.GET("/user/:id", func(c *gin.Context) {
    id := c.Param("id")
    c.JSON(200, gin.H{"user_id": id})
})

❓ Query Params (like /search?name=eliana)

r.GET("/search", func(c *gin.Context) {
    name := c.Query("name")
    c.JSON(200, gin.H{"searched": name})
})


📬 JSON Request Body
------------------------
📝 Accept JSON POST request:

type User struct {
    Name string `json:"name"`
    Age  int    `json:"age"`
}

r.POST("/user", func(c *gin.Context) {
    var user User
    if err := c.ShouldBindJSON(&user); err == nil {
        c.JSON(200, gin.H{"name": user.Name, "age": user.Age})
    } else {
        c.JSON(400, gin.H{"error": err.Error()})
    }
})

🛡️ Middleware (like adding extra layers)
------------------------------------------

Example: Logger, Authentication, etc.

r.Use(gin.Logger()) // built-in logger
r.Use(gin.Recovery()) // handles panic and errors


You can even make your own middleware:

func AuthMiddleware() gin.HandlerFunc {
    return func(c *gin.Context) {
        token := c.GetHeader("Authorization")
        if token != "secret123" {
            c.AbortWithStatusJSON(401, gin.H{"error": "unauthorized"})
            return
        }
        c.Next()
    }
}


🗂️ Grouping Routes
=======================

You can group routes together like:

api := r.Group("/api")
{
    api.GET("/users", getUsers)
    api.POST("/users", createUser)
}


📁 Gin File Structure (Example)
---------------------------------

myapp/
│
├── main.go
├── controllers/
│   └── user.go
├── models/
│   └── user.go
└── routes/
    └── router.go

In main.go you import your router, just like modular apps in C#.


w.g.s lakshitha

instructor in computer technology gr.ii

sameera@foc.sab.ac.lk

dean office ,faclty of university 

developer system

miss project for the faculty

24 weeks

document drafted - awuddata kalin sathiya

071-4387876 - sameera sir
